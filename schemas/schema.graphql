type Query {
  schemaOrg: SchemaOrg!
}

type SchemaOrg {
  nodes(type: Type = ALL, absoluteIRI: Boolean = false): [Property!]!
  class(id: String!, absoluteIRI: Boolean = false): Class
  nodeCount: Int!
}

interface Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  isPending: Boolean!
}

type Class implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  properties(orderBy: NodeOrderByInput): [Property!]!
  isPending: Boolean!
}

type Property implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  schemas: [DataTypeNode!]!
  isPending: Boolean!
}

type DataTypeNode implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  field: FieldValue!
  isPending: Boolean!
}

enum FieldValue {
  URL
  Text
  Unknown
  Number
  Date
  DateTime
}

enum Type {
  CLASS
  ALL
}

input NodeOrderByInput {
  isPending: Sort
}

enum Sort {
  ASC
  DESC
}
