type Query {
  schemaOrg: SchemaOrg!
}

# Schema.org defined node
type SchemaOrg {
  nodes(type: Type = ALL, absoluteIRI: Boolean = false): [PropertyNode!]!
  classNode(id: String!, absoluteIRI: Boolean = false): ClassNode
  nodeCount: Int!
}

interface Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  isPending: Boolean!
}

type ClassNode implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  properties(orderBy: [NodeOrderByInput!]): [PropertyNode!]!
  isPending: Boolean!
}

type PropertyNode implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  schemas: [DataTypeNode!]!
  isPending: Boolean!
}

type DataTypeNode implements Node {
  id: String!
  types: [String!]!
  name: String!
  description: String!
  field: FieldValue!
  isPending: Boolean!
}

enum FieldValue {
  URL
  Text
  Unknown
  Number
  Date
  DateTime
}

enum Type {
  CLASS
  ALL
}

input NodeOrderByInput {
  key: String!
  by: Sort!
}

enum Sort {
  ASC
  DESC
}
